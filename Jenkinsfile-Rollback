def label = "jenkins-slave-${UUID.randomUUID().toString()}"

podTemplate(
	label: label, 
	containers: [
        containerTemplate(name: "helm", image: "dtzar/helm-kubectl:2.16.1", ttyEnabled: true, command: "cat")
	],
	//volume mount
	volumes: [
		hostPathVolume(hostPath: "/var/run/docker.sock", mountPath: "/var/run/docker.sock")
	]
) 
{
	node(label) {
		//-- 환경변수 파일 읽어서 변수값 셋팅
		def props = readProperties  file:"pipeline.properties"
		def tag = props["version"]
		def dockerRegistry = props["dockerRegistry"]
		def credential_registry=props["credential_registry"]
		def image = props["image"]
		def baseDeployDir = props["baseDeployDir"]
		def helmRepository = props["helmRepository"]
		def helmChartname = props["helmChartname"]
		def helmChartfile = "${baseDeployDir}/${helmChartname}"
		def releaseName = props["releaseName"]
		def namespace = props["namespace"]
        def helmRepositoryURL = props["helmRepositoryURL"]
        def helmChartVersion =  props["helmChartVersion"]

		//def deployment = props["deployment"]
		//def service = props["service"]
		//def ingress = props["ingress"]
		//def selector_key = props["selector_key"]
		//def selector_val = props["selector_val"]

		try {
			
            stage("Update Helm Chart") {
                container("helm") {
                    git "https://github.com/HanDongwoo88/helm-charts.git"

                    // helm stable repository url접근 에러로 인한 미러사이트로 url변경
                    // Error: error initializing: Looks like "https://kubernetes-charts.storage.googleapis.com" is not a valid chart repository or cannot be reached: Get https://kubernetes-charts.storage.googleapis.com/index.yaml: x509: certificate has expired or is not yet valid
                    echo "Helm Init"
                    sh "helm init --client-only --stable-repo-url https://kubernetes.oss-cn-hangzhou.aliyuncs.com/charts"

                    echo "Helm packing > make tgz file"
                    sh "helm package dotnet-helm"
                    
                    echo "Make Helm index.yaml file"
                    sh "helm repo index ."
                    
                    echo "Start Local Helm Repository"
                    sh "helm serve --repo-path . &"

					echo "Update Helm Repository"
                    sh "helm repo update"

					echo "confirm helm repository list"
                    sh "helm repo list"

                    echo "Add Helm Repository"
                    sh "helm repo add localrepo ${helmRepositoryURL}"
                    sh "helm repo index ."

                    echo "Update Helm Repository"
                    sh "helm repo update"
                    
                    echo "confirm helm repository list"
                    sh "helm repo list"
                    sh "helm search dotnet"
                }
            }
			stage( "Deploy to Cluster" ) {
				container("helm") {
                    sh "helm init --client-only --stable-repo-url https://kubernetes.oss-cn-hangzhou.aliyuncs.com/charts"	//tiller 설치

                    // version 확인
                    echo "Confirm Helm Version"
                    sh "helm version"
                    // helm repo add
					//echo "Add helm repo"
                    //sh "helm repo add ${baseDeployDir} ${helmRepositoryURL}"
                    sh "helm repo update"
                    
                    sh "helm repo list"

                    sh "helm search dotnet"
                    
                    boolean isExist = false
					
					//====== 이미 설치된 chart 인지 검사 =============
					String out = sh script: "helm ls -q --namespace ${namespace}", returnStdout: true
					if(out.contains("${releaseName}")) isExist = true
					//===========================				
					
					if (isExist) {
						echo "Already installed. I will upgrade it with chart file."
                        sh "helm ls -q --namespace default"	
						sh "helm upgrade ${releaseName} ${helmChartfile}"					
					} else {
						echo "Install with chart file !"
                        sh "helm install ${helmChartfile} --name ${releaseName} --namespace ${namespace}"
						//sh "helm install ${releaseName} ${helmChartfile} --namespace ${namespace}" (Helm v3)
                        //sh "helm install ${helmChartfile} --name ${releaseName}" (Helm v2)				
					}
				}
			}
		} catch(e) {
			currentBuild.result = "FAILED"
		}
	}
}